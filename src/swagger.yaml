openapi: 3.0.0
info:
  title: API-Booking
  description: API для управління бронюваннями
  version: 1.0.0
servers:
  - url: http://localhost:5400/swagger
    description: Local server
paths:
  /admin/sign-up:
    post:
      summary: "Sign-up admin"
      tags:
        - "Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                name:
                  type: "string"
                email:
                  type: "string"
                password:
                  type: "string"
      responses:
        200:
          description: "Admin successfully registered"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Bad request"
        500:
          description: "Internal server error"

  /admin/sign-in:
    post:
      summary: "Sign-in admin"
      tags:
        - "Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                password:
                  type: "string"
      responses:
        200:
          description: "Admin successfully logged in"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokensPair"
        400:
          description: "Invalid credentials"
        500:
          description: "Internal server error"

  /sign-up:
    post:
      summary: "Sign-up user"
      tags:
        - "Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                name:
                  type: "string"
                email:
                  type: "string"
                password:
                  type: "string"
      responses:
        200:
          description: "User successfully registered"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Bad request"
        500:
          description: "Internal server error"

  /sign-in:
    post:
      summary: "Sign-in user"
      tags:
        - "Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                password:
                  type: "string"
      responses:
        200:
          description: "User successfully logged in"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokensPair"
        400:
          description: "Invalid credentials"
        500:
          description: "Internal server error"

  /refresh:
    post:
      summary: "Refresh token"
      tags:
        - "Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                refreshToken:
                  type: "string"
      responses:
        200:
          description: "Token successfully refreshed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokensPair"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        500:
          description: "Internal server error"

  /bookings:
    post:
      summary: "Create booking"
      tags:
        - "Bookings"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking"
      responses:
        201:
          description: "Booking created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingResponse"
        400:
          description: "Bad request"
        500:
          description: "Internal server error"

    get:
      summary: "Get all bookings paginated"
      tags:
        - "Bookings"
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 1
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 10
        - name: "sortedBy"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "filterBy"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        200:
          description: "List of bookings"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationResponse"
        400:
          description: "Bad request"
        500:
          description: "Internal server error"

  /bookings/{id}:
    get:
      summary: "Get booking by ID"
      tags:
        - "Bookings"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "Booking details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingResponse"
        404:
          description: "Booking not found"
        500:
          description: "Internal server error"

    put:
      summary: "Update booking"
      tags:
        - "Bookings"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Booking"
      responses:
        200:
          description: "Booking updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingResponse"
        400:
          description: "Bad request"
        404:
          description: "Booking not found"
        500:
          description: "Internal server error"

    delete:
      summary: "Delete booking"
      tags:
        - "Bookings"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "Booking deleted successfully"
        404:
          description: "Booking not found"
        500:
          description: "Internal server error"

  /user/me:
    get:
      summary: "Get user profile"
      description: "Returns the authenticated user's profile information."
      tags:
        - "User"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "User profile retrieved successfully."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"

    put:
      summary: "Update user profile"
      description: "Updates the authenticated user's profile information."
      tags:
        - "User"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        201:
          description: "User profile updated successfully."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"

    delete:
      summary: "Delete user profile"
      description: "Deletes the authenticated user's profile."
      tags:
        - "User"
      security:
        - bearerAuth: []
      responses:
        204:
          description: "User profile deleted successfully."
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"

components:
  schemas:
    User:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        role:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"

    TokensPair:
      type: "object"
      properties:
        accessToken:
          type: "string"
        accessExpiresIn:
          type: "string"
        refreshToken:
          type: "string"
        refreshExpiresIn:
          type: "string"

    Booking:
      type: "object"
      properties:
        user:
          type: "string"
        date:
          type: "string"
          format: "date"
        startTime:
          type: "string"
          pattern: "^\d{2}:\d{2}$"
        endTime:
          type: "string"
          pattern: "^\d{2}:\d{2}$"

    BookingResponse:
      type: "object"
      properties:
        id:
          type: "string"
        user:
          type: "string"
        date:
          type: "string"
        startTime:
          type: "string"
        endTime:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"

    PaginationResponse:
      type: "object"
      properties:
        page:
          type: "integer"
        limit:
          type: "integer"
        itemsFound:
          type: "integer"
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/BookingResponse"

    UserResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
